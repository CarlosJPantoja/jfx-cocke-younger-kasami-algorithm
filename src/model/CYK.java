/**
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * @Authors: Juan Esteban Caicedo and Carlos Jimmy Pantoja.
 * @Date: May, 15th 2022
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
package model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;

public class CYK {

    // -----------------------------------------------------------------
    // Constants
    // -----------------------------------------------------------------

    public static final String INITIAL_VARIABLE = "S";

    // -----------------------------------------------------------------
    // Attributes
    // -----------------------------------------------------------------

    private String string;
    private Hashtable<Character, ArrayList<String>> grammar = new Hashtable<>();

    // -----------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------

    /**
     * Name: checkStringGeneration <br>
     * <br> Method used to check if the specified string is generated by the specified grammar. <br><br>
     * <b>pre: </b> The content of the specified grammar was already filled before in a Hashtable. <br><br>
	 * <b>post: </b> The true value of verifying if the specified string is generated by the specified grammar. <br>
     * @param string - String to verify - string = String, string != null
     * @return A boolean with true if the grammar generates the string, otherwise with false.
    */
    public boolean checkStringGeneration(String string) {
        this.string = string;
        String[][] table = cykAlgorithm(buildTableCYK(string));
        if (table[table.length - 1][table[table.length - 1].length - 1].contains(INITIAL_VARIABLE))
            return true;
        else
            return false;
    }

    /**
     * Name: fillGrammar <br>
     * <br> Method used to fill the content of the specified grammar in a Hashtable. <br><br>
     * <b>pre: </b> The user has already entered the grammar and the string in the GUI. <br><br>
	 * <b>post: </b> The content of the specified grammar is filled in a Hashtable. <br>
     * @param nonTerminals - Non-terminals symbols of the grammar - nonTerminals = ArrayList of Character
     * @param productions - Productions of the grammar - productions = ArrayList of ArrayList of String
    */
    public void fillGrammar(ArrayList<Character> nonTerminals, ArrayList<ArrayList<String>> productions) {
        for (int i = 0; i < nonTerminals.size(); i++)
            grammar.put(nonTerminals.get(i), productions.get(i));
    }

    /**
     * Name: buildTableCYK <br>
     * <br> Private method used to build an empty CYK table as a String matrix according to the length of the specified string. <br><br>
     * <b>pre: </b> The content of the specified grammar was already filled before in a Hashtable. <br><br>
	 * <b>post: </b> An empty CYK table is built as a String matrix. <br>
     * @param string - String specified in GUI - string = String, string != null
     * @return An empty String matrix according to the length of the specified string.
    */
    private String[][] buildTableCYK(String string) {
        String[][] table = new String[string.length() + 1][];
        table[0] = new String[string.length()];
        for (int i = 1; i < table.length; i++)
            table[i] = new String[string.length() - (i - 1)];
        for (int i = 1; i < table.length; i++) {
            for (int j = 0; j < table[i].length; j++)
                table[i][j] = "";
        }
        return table;
    }

    /**
     * Name: cykAlgorithm <br>
     * <br> Private method used to apply the CYK algorithm to a string in a String matrix. <br><br>
     * <b>pre: </b> The content of the specified grammar was already filled before in a Hashtable and an empty CYK table was already built as a String matrix. <br><br>
	 * <b>post: </b> CYK algorithm performed. <br>
     * @param table - Empty String matrix representing the CYK table - table = String[][], table != null
     * @return A filled String matrix, result of applying on it the CYK algorithm to a string.
    */
    private String[][] cykAlgorithm(String[][] table) {
        for (int j = 0; j < table[0].length; j++)
            table[0][j] = String.valueOf(string.charAt(j));
        for (int j = 0; j < table[1].length; j++) {
            String[] substring = new String[1];
            substring[0] = table[0][j];
            String[] variablesProducers = getVariablesThatProduce(substring);
            table[1][j] = giveFormat(variablesProducers);
        }
        if (string.length() <= 1)
            return table;
        for (int j = 0; j < table[2].length; j++) {
            String[] x2minus1j = table[1][j].split(", ");
            String[] x2minus1jPlus1 = table[1][j + 1].split(", ");
            String[] variablesProducers = getVariablesThatProduce(combineCells(x2minus1j, x2minus1jPlus1));
            table[2][j] = giveFormat(variablesProducers);
        }
        if (string.length() <= 2) {
            return table;
        }
        Set<String> setOfVariablesProducers = new HashSet<>();
        for (int i = 3; i < table.length; i++) {
            for (int j = 0; j < table[i].length; j++) {
                for (int k = 1; k < i; k++) {
                    String[] xij1 = table[k][j].split(", ");
                    String[] xij2 = table[i - k][j + k].split(", ");
                    String[] combinations = combineCells(xij1, xij2);
                    String[] variablesProducers = getVariablesThatProduce(combinations);
                    if (table[i][j].isEmpty())
                        table[i][j] = giveFormat(variablesProducers);
                    else {
                        String[] variablesRepeated = table[i][j].split(", ");
                        ArrayList<String> variablesRepeatedAndFull = new ArrayList<String>(Arrays.asList(variablesRepeated));
                        variablesRepeatedAndFull.addAll(Arrays.asList(variablesProducers));
                        setOfVariablesProducers.addAll(variablesRepeatedAndFull);
                        table[i][j] = giveFormat(setOfVariablesProducers.toArray(new String[setOfVariablesProducers.size()]));
                    }
                }
                setOfVariablesProducers.clear();
            }
        }
        return table;
    }

    /**
     * Name: getVariablesThatProduce <br>
     * <br> Private method used to get the variables that produce the combinations realized between sets of producers variables during the CYK algorithm. <br><br>
     * <b>pre: </b> The CYK algorithm is being realized and has filled at least the first row of the CYK table (String matrix). <br><br>
	 * <b>post: </b> The variables that produce the specified combinations are obtained. <br>
     * @param combinations - Combinations realized between sets of producers variables during the CYK algorithm - combinations = String[], combinations != null
     * @return A String array with the variables that produce the specified combinations.
    */
    private String[] getVariablesThatProduce(String[] combinations) {
        ArrayList<String> variablesProducers = new ArrayList<>();
        for (Character variable : grammar.keySet()) {
            for (String production : combinations) {
                if (grammar.get(variable).contains(production))
                    variablesProducers.add(String.valueOf(variable));
            }
        }
        String[] varProducers = new String[variablesProducers.size()];
        return variablesProducers.toArray(varProducers);
    }

    /**
     * Name: giveFormat <br>
     * <br> Private method used to convert the content of a String array in a String, separating the elements by a coma and removing the '[' and ']' symbols. <br><br>
     * <b>pre: </b> The CYK algorithm is being realized and the variables that produce specific combinations were already obtained. <br><br>
	 * <b>post: </b> The content of the specified String array is converted in a String with an specific format. <br>
     * @param input - String array with the variables that produce specified combinations performed during the CYK algorithm - input = String[], input != null
     * @return A String with the variables that produce specified combinations, separated by a coma.
    */
    private String giveFormat(String[] input) {
        String format = Arrays.toString(input).replaceAll("[\\[\\]\\,]", ",");
        return format.substring(1, format.length() - 1);
    }

    /**
     * Name: combineCells <br>
     * <br> Private method used to perform the combinations between given cells of the CYK table (String matrix). <br><br>
     * <b>pre: </b> The CYK algorithm is being realized and has filled at least the CYK table (String matrix) when j = 1. <br><br>
	 * <b>post: </b> The combinations of specific cells of the CYK table (String matrix) are performed. <br>
     * @param xij1 - Cells of the CYK table (String matrix) that contain producer variables to combine - xij1 = String[], xij1 != null
     * @param xij2 - Cells of the CYK table (String matrix) that contain producer variables to combine - xij2 = String[], xij2 != null
     * @return A String array with the combinations done between the specified cells of the CYK table (String matrix).
    */
    private String[] combineCells(String[] xij1, String[] xij2) {
        int lengthAllVariablesProducers = xij1.length * xij2.length;
        int combination = 0;
        String[] combinations = new String[lengthAllVariablesProducers];
        for (int i = 0; i < xij1.length; i++) {
            for (int j = 0; j < xij2.length; j++) {
                combinations[combination] = xij1[i] + xij2[j];
                combination++;
            }
        }
        return combinations;
    }
}